#include<bits/stdc++.h>
using namespace std;
typedef long long ll;
const int mx = 210,INF = 1e7;
int dis1[mx][mx],dis2[mx][mx],vis1[mx][mx],vis2[mx][mx];
char grid[mx][mx];
int n,m,jx,jy,gx,gy,ans;
int dx[]= {0,1,0,-1};
int dy[]= {1,0,-1,0};
void bfs1(int x, int y)
{
    for(int i=0; i<n; i++)
        for(int j=0; j<m; j++)
            vis1[i][j]=0;

    queue<pair<int,int>>q;
    q.push({x,y});
    dis1[x][y]=0;
    vis1[x][y]=1;
    while(!q.empty())
    {
        x = q.front().first;
        y = q.front().second;
        q.pop();
        for(int i=0; i<4; i++)
        {
            int u = x+dx[i];
            int v = y+dy[i];
            if(u>=0 && v>=0 && u<n && v<m && !vis1[u][v] && grid[u][v]!='#')
            {
                vis1[u][v]=1;
                if(dis1[u][v]>dis1[x][y]+1)
                {
                    q.push({u,v});
                    dis1[u][v] = dis1[x][y]+1;
                }
            }
        }
    }
}
void bfs2(int x, int y)
{
    queue<pair<int,int>>q;
    q.push({x,y});
    dis2[x][y]=0;
    vis2[x][y]=1;
    while(!q.empty())
    {
        x = q.front().first;
        y = q.front().second;
        q.pop();

        if(x==0 || y==0 || x==n-1 || y==m-1)
            ans = min(ans,dis2[x][y]+1);

        for(int i=0; i<4; i++)
        {
            int u = x+dx[i];
            int v = y+dy[i];
            if(u>=0 && v>=0 && u<n && v<m && !vis2[u][v] && grid[u][v]!='#')
            {
                dis2[u][v] =min(dis2[u][v],dis2[x][y]+1);
                vis2[u][v]=1;
                if(dis2[u][v]>=dis1[u][v])
                    continue;
                q.push({u,v});
            }
        }
    }
}
void reset()
{
    for(int i=0; i<=n; i++)
        for(int j=0; j<=m; j++)
        {
            grid[i][j]='#';
            vis1[i][j]=vis2[i][j]=0;
            dis1[i][j]=dis2[i][j]=INF;
        }
}
int main()
{
    int t,cas=1;
    scanf("%d",&t);
    while(t--)
    {
        scanf("%d %d",&n,&m);
        getchar();
        reset();
        for(int i=0; i<n; i++)
        {
            scanf("%s",grid[i]);
        }
        for(int i=0; i<n; i++)
        {
            for(int j=0; j<m; j++)
            {
                if(grid[i][j]=='F')
                    bfs1(i,j);
                if(grid[i][j]=='J')
                    jx=i,jy=j;
            }
        }
        ans = INT_MAX;
        bfs2(jx,jy);
        printf("Case %d: ",cas++);
        if(ans == INT_MAX) printf("IMPOSSIBLE\n");
        else printf("%d\n",ans);
    }
}
